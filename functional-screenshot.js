const range = (n) => [...Array(n).keys()];
const rand = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;
const curry = (fn) => (a) => (b) => fn(a, b);
const add = (a, b) => a + b;
const mul = (a, b) => a * b;
const add1 = curry(add)(1);
const double = curry(mul)(2);
const compose = (...fns) => (x) => fns.reduceRight((v, f) => f(v), x);
const pipe = (...fns) => (x) => fns.reduce((v, f) => f(v), x);
const unique = (xs) => [...new Set(xs)];
const sample = (xs) => xs[rand(0, xs.length - 1)];
const replicate = (n, fn) => range(n).map(fn);
const nums = replicate(20, () => rand(1, 100));
const even = (n) => n % 2 === 0;
const odd = (n) => !even(n);
const sum = (xs) => xs.reduce((a, b) => a + b, 0);
const mean = (xs) => sum(xs) / xs.length;
const median = (xs) => { const s = [...xs].sort((a, b) => a - b); const m = Math.floor(s.length / 2); return s.length % 2 ? s[m] : (s[m - 1] + s[m]) / 2; };
const variance = (xs) => { const m = mean(xs); return mean(xs.map(x => (x - m) ** 2)); };
const stddev = (xs) => Math.sqrt(variance(xs));
const toPairs = (xs) => xs.map((x, i) => [i, x]);
const fromPairs = (pairs) => pairs.reduce((o, [k, v]) => ((o[k] = v), o), {});
const mapObj = (o, fn) => fromPairs(Object.entries(o).map(([k, v]) => [k, fn(v, k)]));
const freq = (xs) => fromPairs(Object.entries(xs.reduce((acc, x) => ((acc[x] = (acc[x] || 0) + 1), acc), {})));
const topN = (n) => (o) => Object.entries(o).sort((a, b) => b[1] - a[1]).slice(0, n);
const label = (s) => (x) => `${s}: ${x}`;
const toStr = (xs) => xs.join(', ');
const incOddThenDouble = pipe(add1, x => odd(x) ? x + 1 : x, double);
const transformed = nums.map(incOddThenDouble);
const stats = { sum: sum(nums), mean: mean(nums), median: median(nums), stddev: stddev(nums) };
const evens = nums.filter(even);
const odds = nums.filter(odd);
const common = topN(3)(freq(nums));
const show = (...xs) => console.log(...xs);
show('nums', toStr(nums));
show('transformed', toStr(transformed));
show('evens', toStr(evens));
show('odds', toStr(odds));
show('stats', JSON.stringify(stats));
show('common', JSON.stringify(common));
